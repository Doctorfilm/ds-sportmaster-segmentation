import os
import requests
import shutil
import pickle
import cv2
import numpy as np
from datetime import datetime
from io import BytesIO
from PIL import Image
from tqdm import tqdm
import vk_api
from deepface import DeepFace

# ----------------------------------------------------------
# -------- –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ –∏–∑ VK -----------------------------
# ----------------------------------------------------------

def resolve_group_id(vk, group_identifier):
    """
    –ü–æ–ª—É—á–∞–µ—Ç owner_id –≥—Ä—É–ø–ø—ã –ø–æ –µ—ë screen_name –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–∏—Å–ª–æ–≤–æ–π ID.
    """
    if isinstance(group_identifier, int):
        return group_identifier
    try:
        result = vk.method("utils.resolveScreenName", {"screen_name": group_identifier})
        if result and result.get("type") == "group":
            return -result.get("object_id")
        raise ValueError(f"–ì—Ä—É–ø–ø–∞ {group_identifier} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ ID: {e}")
        return None


def download_photos(token, groups, albums,
                    photo_path='data/raw',
                    max_photos=1000,
                    pref_sizes=None):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö VK-–≥—Ä—É–ø–ø –∏ –∞–ª—å–±–æ–º–æ–≤.
    - token: VK API token
    - groups: dict {group_name: screen_name_or_id}
    - albums: dict {group_name: [album_id, ...]}
    - photo_path: –ø–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ (–±—É–¥—É—Ç —Å–æ–∑–¥–∞–Ω—ã –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –ø–∞–ø–∫–∏ –ø–æ –≥–æ–¥–∞–º)
    - max_photos: –º–∞–∫—Å. —á–∏—Å–ª–æ —Ñ–æ—Ç–æ –Ω–∞ –∞–ª—å–±–æ–º
    - pref_sizes: —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ä–∞–∑–º–µ—Ä–æ–≤, –Ω–∞–ø—Ä. ['z','y','x']
    """
    max_photos = int(max_photos)
    if pref_sizes is None:
        pref_sizes = ["z", "y", "x", "m", "s"]

    vk = vk_api.VkApi(token=token)

    for group_name, group_id in groups.items():
        owner_id = resolve_group_id(vk, group_id)
        if not owner_id:
            continue

        album_ids = albums.get(group_name, [])
        if not album_ids:
            print(f"–ü—Ä–æ–ø—É—â–µ–Ω–∞ –≥—Ä—É–ø–ø–∞ {group_name}: album_ids –Ω–µ –∑–∞–¥–∞–Ω—ã.")
            continue

        try:
            resp = vk.method("photos.getAlbums", {"owner_id": owner_id, "need_system": 1})
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–ª—å–±–æ–º—ã –≥—Ä—É–ø–ø—ã {group_name}: {e}")
            continue

        # –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ album_id -> –≥–æ–¥ —Å–æ–∑–¥–∞–Ω–∏—è
        album_years = {
            alb.get("id"): str(datetime.fromtimestamp(alb.get("created")).year)
            for alb in resp.get("items", []) if alb.get("id") in album_ids
        }

        for album_id in album_ids:
            year = album_years.get(album_id, str(album_id))
            save_dir = os.path.join(photo_path, year)
            if os.path.exists(save_dir):
                shutil.rmtree(save_dir)
            os.makedirs(save_dir, exist_ok=True)

            print(f"\nüì• –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ: –≥—Ä—É–ø–ø–∞={group_name}, –∞–ª—å–±–æ–º={album_id}, –ø–∞–ø–∫–∞={year}")
            downloaded = 0

            try:
                photos = vk.method("photos.get", {
                    "owner_id": owner_id,
                    "album_id": album_id,
                    "extended": 0,
                    "count": 1000
                })
                items = sorted(photos.get("items", []), key=lambda x: x.get("date", 0), reverse=True)

                for photo in tqdm(items, desc=f"{group_name}_{year}"):
                    if downloaded >= max_photos:
                        break
                    # –í—ã–±–æ—Ä URL –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
                    url = None
                    for sz in photo.get("sizes", []):
                        if sz.get("type") in pref_sizes:
                            url = sz.get("url")
                            break
                    if not url and photo.get("sizes"):
                        url = photo["sizes"][0].get("url")

                    try:
                        resp = requests.get(url, timeout=10)
                        img = Image.open(BytesIO(resp.content))
                        filename = f"{group_name}_{year}_{downloaded+1:04d}.jpg"
                        img.save(os.path.join(save_dir, filename))
                        downloaded += 1
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ URL={url}: {e}")

            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–æ—Ç–æ –∏–∑ –∞–ª—å–±–æ–º–∞ {album_id}: {e}")

            print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {downloaded} —Ñ–æ—Ç–æ –≤ {save_dir}")


# ----------------------------------------------------------
# -------- –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∏—Ü —á–µ—Ä–µ–∑ DeepFace --------------------
# ----------------------------------------------------------

def is_blurry(image, threshold=100.0):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º—ã—Ç–æ—Å—Ç–∏ –ø–æ –¥–∏—Å–ø–µ—Ä—Å–∏–∏ –õ–∞–ø–ª–∞—Å–∏–∞–Ω–∞.
    """
    gray = cv2.cvtColor(image, cv2.COLOR_RGB2GRAY)
    return cv2.Laplacian(gray, cv2.CV_64F).var() < threshold


def simple_preprocess_face(img, target_size=(224, 224)):
    """
    –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∏—Ü–∞ –¥–ª—è DeepFace: RGB->BGR, resize –∏ –Ω–æ—Ä–º–∏—Ä–æ–≤–∫–∞.
    """
    if img.ndim == 3 and img.shape[2] == 3:
        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
    img = cv2.resize(img, target_size)
    img = img.astype(np.float32) / 255.0
    return np.expand_dims(img, axis=0)


def detect_and_save_faces(photo_path, face_path, face_size=50,
                          model_name="VGG-Face", detector_backend="retinaface"):
    """
    –ò—â–µ—Ç –ª–∏—Ü–∞ –≤ –ø–∞–ø–∫–∞—Ö –ø–æ –≥–æ–¥–∞–º, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–∑–º–µ—Ä –∏ —Ä–∞–∑–º—ã—Ç–æ—Å—Ç—å,
    —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã –∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–∏.
    """
    os.environ["CUDA_VISIBLE_DEVICES"] = "-1"
    model = DeepFace.build_model(model_name)

    for year in sorted(os.listdir(photo_path)):
        src = os.path.join(photo_path, year)
        if not os.path.isdir(src):
            continue
        print(f"\n=== –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∏—Ü: {year} ===")

        dst_folder = os.path.join(face_path, year)
        os.makedirs(dst_folder, exist_ok=True)
        embeddings_info = []
        counter = 0

        files = [f for f in os.listdir(src) if f.lower().endswith((".jpg", ".jpeg", ".png"))]
        print(f"–ù–∞–π–¥–µ–Ω–æ {len(files)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")

        for fname in tqdm(files, desc=f"–õ–∏—Ü–∞ {year}"):
            img_file = os.path.join(src, fname)
            try:
                detections = DeepFace.extract_faces(
                    img_path=img_file,
                    detector_backend=detector_backend,
                    enforce_detection=False,
                    align=False
                )
                for face_obj in detections:
                    face_img = face_obj.get("face")
                    face_img = np.nan_to_num(face_img)
                    # –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ uint8
                    if face_img.dtype != np.uint8:
                        face_img = np.clip(face_img * 255, 0, 255).astype(np.uint8)

                    h, w = face_img.shape[:2]
                    if min(h, w) < face_size or is_blurry(face_img):
                        continue

                    save_name = f"{year}_{counter:05d}.jpg"
                    save_path = os.path.join(dst_folder, save_name)
                    cv2.imwrite(save_path, cv2.cvtColor(face_img, cv2.COLOR_RGB2BGR))

                    emb = DeepFace.represent(
                        img_path=save_path,
                        model_name=model_name,
                        enforce_detection=False,
                        detector_backend="skip"
                    )[0]["embedding"]
                    embeddings_info.append((emb, save_name, fname))
                    counter += 1
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {fname}: {e}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥–∏
        out_file = os.path.join(face_path, f"{year}_embeddings.pkl")
        with open(out_file, "wb") as f:
            pickle.dump(embeddings_info, f)
        print(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {counter} –ª–∏—Ü –≤ {dst_folder}")
        print(f"–≠–º–±–µ–¥–¥–∏–Ω–≥–∏ –≤ {out_file}")